// <auto-generated />

using Infrastructure.Tools;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ApiGateway.Migrations
{
    [DbContext(typeof(ApiGetwayDbContext))]
    partial class ApiGetwayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.Routes.AuthenticationOption", b =>
                {
                    b.Property<int>("AuthenticationOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string[]>("AllowedScopes")
                        .HasColumnType("text[]");

                    b.Property<string>("AuthenticationProviderKey")
                        .HasColumnType("text");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("AuthenticationOptionId");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("AuthenticationOptions");

                    b.HasData(
                        new
                        {
                            AuthenticationOptionId = 1,
                            AllowedScopes = new[] { "ApiOne", "ApiTwo" },
                            AuthenticationProviderKey = "TestKey",
                            RouteId = 1
                        },
                        new
                        {
                            AuthenticationOptionId = 2,
                            AllowedScopes = new[] { "ApiOne", "ApiTwo" },
                            AuthenticationProviderKey = "TestKey",
                            RouteId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Routes.DownstreamHostAndPort", b =>
                {
                    b.Property<int>("DownstreamHostAndPortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("DownstreamHostAndPortId");

                    b.HasIndex("RouteId");

                    b.ToTable("DownstreamHostAndPorts");

                    b.HasData(
                        new
                        {
                            DownstreamHostAndPortId = 1,
                            Host = "localhost",
                            Port = 3001,
                            RouteId = 1
                        },
                        new
                        {
                            DownstreamHostAndPortId = 2,
                            Host = "localhost",
                            Port = 4003,
                            RouteId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Routes.GlobalConfiguration", b =>
                {
                    b.Property<int>("GlobalConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.HasKey("GlobalConfigurationId");

                    b.ToTable("GlobalConfigurations");

                    b.HasData(
                        new
                        {
                            GlobalConfigurationId = 1,
                            BaseUrl = "https://localhost:6900"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Routes.LoadBalancerOption", b =>
                {
                    b.Property<int>("LoadBalancerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("LoadBalancerOptionId");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("LoadBalancerOptions");

                    b.HasData(
                        new
                        {
                            LoadBalancerOptionId = 1,
                            RouteId = 1,
                            Type = 1
                        },
                        new
                        {
                            LoadBalancerOptionId = 2,
                            RouteId = 2,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Routes.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("DownstreamPathTemplate")
                        .HasColumnType("text");

                    b.Property<string>("DownstreamScheme")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string[]>("UpstreamHttpMethod")
                        .HasColumnType("text[]");

                    b.Property<string>("UpstreamPathTemplate")
                        .HasColumnType("text");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");

                    b.HasData(
                        new
                        {
                            RouteId = 1,
                            DownstreamPathTemplate = "/{url}",
                            DownstreamScheme = "https",
                            Enabled = true,
                            UpstreamHttpMethod = new[] { "GET", "POST", "PUT", "DELETE" },
                            UpstreamPathTemplate = "/ServiceOne/{url}"
                        },
                        new
                        {
                            RouteId = 2,
                            DownstreamPathTemplate = "/{url}",
                            DownstreamScheme = "https",
                            Enabled = true,
                            UpstreamHttpMethod = new[] { "GET", "POST", "PUT", "DELETE" },
                            UpstreamPathTemplate = "/ServiceTwo/{url}"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Routes.AuthenticationOption", b =>
                {
                    b.HasOne("Domain.Entities.Routes.Route", "Route")
                        .WithOne("AuthenticationOptions")
                        .HasForeignKey("Domain.Entities.Routes.AuthenticationOption", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Routes.DownstreamHostAndPort", b =>
                {
                    b.HasOne("Domain.Entities.Routes.Route", "Route")
                        .WithMany("DownstreamHostAndPorts")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Routes.LoadBalancerOption", b =>
                {
                    b.HasOne("Domain.Entities.Routes.Route", "Route")
                        .WithOne("LoadBalancerOptions")
                        .HasForeignKey("Domain.Entities.Routes.LoadBalancerOption", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
