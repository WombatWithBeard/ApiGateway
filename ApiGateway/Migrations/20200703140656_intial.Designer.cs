// <auto-generated />
using System.Collections.Generic;
using Infrastructure.Tools;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ApiGateway.Migrations
{
    [DbContext(typeof(ApiGetwayDbContext))]
    [Migration("20200703140656_intial")]
    partial class intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Domain.Entities.Routes.AuthenticationOption", b =>
                {
                    b.Property<string>("AuthenticationOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("text");

                    b.Property<List<string>>("AllowedScopes")
                        .HasColumnType("text[]");

                    b.Property<string>("AuthenticationProviderKey")
                        .HasColumnType("text");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("AuthenticationOptionId");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("AuthenticationOptions");
                });

            modelBuilder.Entity("Domain.Entities.Routes.DownstreamHostAndPort", b =>
                {
                    b.Property<int>("DownstreamHostAndPortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.HasKey("DownstreamHostAndPortId");

                    b.HasIndex("RouteId");

                    b.ToTable("DownstreamHostAndPorts");
                });

            modelBuilder.Entity("Domain.Entities.Routes.GlobalConfiguration", b =>
                {
                    b.Property<int>("GlobalConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.HasKey("GlobalConfigurationId");

                    b.ToTable("GlobalConfigurations");
                });

            modelBuilder.Entity("Domain.Entities.Routes.LoadBalancerOption", b =>
                {
                    b.Property<int>("LoadBalancerOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("LoadBalancerOptionId");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("LoadBalancerOptions");
                });

            modelBuilder.Entity("Domain.Entities.Routes.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DownstreamPathTemplate")
                        .HasColumnType("text");

                    b.Property<string>("DownstreamScheme")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("UpstreamHttpMethod")
                        .HasColumnType("text[]");

                    b.Property<string>("UpstreamPathTemplate")
                        .HasColumnType("text");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Domain.Entities.Routes.AuthenticationOption", b =>
                {
                    b.HasOne("Domain.Entities.Routes.Route", null)
                        .WithOne("AuthenticationOptions")
                        .HasForeignKey("Domain.Entities.Routes.AuthenticationOption", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Routes.DownstreamHostAndPort", b =>
                {
                    b.HasOne("Domain.Entities.Routes.Route", null)
                        .WithMany("DownstreamHostAndPorts")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Routes.LoadBalancerOption", b =>
                {
                    b.HasOne("Domain.Entities.Routes.Route", null)
                        .WithOne("LoadBalancerOptions")
                        .HasForeignKey("Domain.Entities.Routes.LoadBalancerOption", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
